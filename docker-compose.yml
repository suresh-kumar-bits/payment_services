version: '3.8'

services:
  # PostgreSQL Database for Payment Service
  payment_db:
    image: postgres:15-alpine
    container_name: payment-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Superb#915
    ports:
      - "5433:5433"
    volumes:
      # Data persistence
      - payment_db_data:/var/lib/postgresql/data
      # Initial setup scripts (optional)
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Payment Service API
  payment_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payment-service-api
    restart: unless-stopped
    ports:
      - "8082:8082"
    depends_on:
      payment_db:
        condition: service_healthy
    environment:
      # Database connection
      DB_HOST: payment_db
      DB_PORT: 5433
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASS: Superb#915
      # Inter-service URLs (update these based on your setup)
      TRIP_SERVICE_URL: ${TRIP_SERVICE_URL:-http://trip-service:8081}
      NOTIFICATION_SERVICE_URL: ${NOTIFICATION_SERVICE_URL:-http://notification-service:8084}
      # Python environment
      PYTHONUNBUFFERED: 1
    volumes:
      # Mount source code for development (remove in production)
      - ./:/app
      # Mount CSV file
      - ./rhfd_payments.csv:/app/rhfd_payments.csv
    networks:
      - payment-network
      - ride-hailing-network  # Shared network for inter-service communication
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Adminer for database management (optional, for development)
  payment_adminer:
    image: adminer:latest
    container_name: payment-adminer
    restart: unless-stopped
    ports:
      - "8083:8080"
    environment:
      ADMINER_DEFAULT_SERVER: payment_db
    networks:
      - payment-network
    depends_on:
      - payment_db
    profiles:
      - debug

  # Redis for caching (optional enhancement)
  payment_redis:
    image: redis:7-alpine
    container_name: payment-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - payment_redis_data:/data
    networks:
      - payment-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - with-cache

networks:
  payment-network:
    driver: bridge
  ride-hailing-network:
    external: true
    name: ride-hailing-network

volumes:
  payment_db_data:
    driver: local
  payment_redis_data:
    driver: local